generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
}

enum ScanStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

model User {
  id                String    @id @default(uuid())
  name              String?
  email             String    @unique
  username          String    @unique
  avatarUrl         String?
  emailVerified     DateTime?
  password          String?
  provider          String?
  providerAccountId String?
  role              Role      @default(CLIENT)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  mfaSecret    String?
  mfaEnabled   Boolean @default(false)
  mfaCompleted Boolean @default(false)

  accounts           Account[]
  sessions           Session[]
  verificationTokens VerificationToken[]
  projects           Project[]
  scans              Scan[]
  events             Event[]
  apiTokens          ApiToken[] // New: relation to Event
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  access_token      String?
  expires_at        Int?
  refresh_token     String?
  scope             String?
  token_type        String?
  id_token          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                  String    @id @default(uuid())
  sessionToken        String    @unique
  userId              String
  expires             DateTime
  refreshToken        String?   @unique
  refreshTokenExpires DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  token      String   @unique
  identifier String
  expires    DateTime

  user User @relation(fields: [identifier], references: [email])
}

model Project {
  id            String   @id @default(uuid())
  name          String
  description   String?
  userId        String
  repoUrl       String?
  webhookSecret String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  scans  Scan[]
  events Event[] // New: relation to Event

  @@unique([userId, name])
  @@index([id])
}

model Event {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  type      String // e.g., "manual", "webhook"
  scanMode  String // e.g., "automated", "manual"
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  scans   Scan[] // One-to-many: Event -> Scan

  @@index([userId])
  @@index([projectId])
}

model Scan {
  id         String     @id @default(uuid())
  userId     String
  projectId  String
  toolId     String
  toolName   String
  category   String
  targetUrl  String
  summary    Json?
  results    Json?
  status     ScanStatus @default(PENDING)
  scanId     String? // External scan ID if needed
  reportPath String? // Supabase or storage path
  mode       String     @default("manual")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  eventId String? // Foreign key to Event
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: SetNull)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([projectId])
  @@index([eventId])
}

model ApiToken {
  id        String    @id @default(uuid())
  userId    String
  tokenHash String // Hashed version of the token
  label     String? // Optional: “CI for Project A”
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  revoked   Boolean   @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
